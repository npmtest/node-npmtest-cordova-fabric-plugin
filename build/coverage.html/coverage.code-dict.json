{"/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/test.js":"/* istanbul instrument in package npmtest_cordova_fabric_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/lib.npmtest_cordova_fabric_plugin.js":"/* istanbul instrument in package npmtest_cordova_fabric_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_fabric_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_fabric_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-fabric-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_fabric_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_fabric_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_fabric_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_fabric_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_fabric_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_fabric_plugin.__dirname + '/lib.npmtest_cordova_fabric_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/hooks/after_plugin_add.js":"\nvar androidHelper = require('./lib/android-helper');\nvar iosHelper = require(\"./lib/ios-helper\");\nvar utilities = require(\"./lib/utilities\");\n\nmodule.exports = function(context) {\n\n    var platforms = context.opts.cordova.platforms;\n\n    // Modify the Gradle build file to add a task that will upload the debug symbols\n    // at build time.\n    if (platforms.indexOf(\"android\") !== -1) {\n        androidHelper.removeFabricBuildToolsFromGradle();\n        androidHelper.addFabricBuildToolsGradle();\n    }\n\n    // Add a build phase which runs a shell script that executes the Crashlytics\n    // run command line tool which uploads the debug symbols at build time.\n    if (platforms.indexOf(\"ios\") !== -1) {\n        var xcodeProjectPath = utilities.getXcodeProjectPath(context);\n        iosHelper.removeShellScriptBuildPhase(context, xcodeProjectPath);\n        iosHelper.addShellScriptBuildPhase(context, xcodeProjectPath);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/hooks/lib/android-helper.js":"\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar utilities = require(\"./utilities\");\n\nmodule.exports = {\n\n    addFabricBuildToolsGradle: function() {\n\n        var buildGradle = utilities.readBuildGradle();\n\n        buildGradle +=  [\n            \"\",\n            \"// Fabric Cordova Plugin - Start Fabric Build Tools \",\n            \"buildscript {\",\n            \"    repositories {\",\n            \"        maven { url 'https://maven.fabric.io/public' }\",\n            \"    }\",\n            \"    dependencies {\",\n            \"        classpath 'io.fabric.tools:gradle:1.+'\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"apply plugin: 'io.fabric'\",\n            \"// Fabric Cordova Plugin - End Fabric Build Tools\",\n        ].join(\"\\n\");\n\n        utilities.writeBuildGradle(buildGradle);\n    },\n\n    removeFabricBuildToolsFromGradle: function() {\n\n        var buildGradle = utilities.readBuildGradle();\n\n        buildGradle = buildGradle.replace(/\\n\\/\\/ Fabric Cordova Plugin - Start Fabric Build Tools[\\s\\S]*\\/\\/ Fabric Cordova Plugin - End Fabric Build Tools/, \"\");\n\n        utilities.writeBuildGradle(buildGradle);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/hooks/lib/utilities.js":"\n/**\n * Utilities and shared functionality for the build hooks.\n */\n\nvar path = require(\"path\");\nvar fs = require(\"fs\");\n\n/**\n * Used to get the path to the build.gradle file for the Android project.\n *\n * @returns {string} The path to the build.gradle file.\n */\nfunction getBuildGradlePath() {\n    return path.join(\"platforms\", \"android\", \"build.gradle\");\n};\n\nmodule.exports = {\n\n    /**\n     * Used to get the name of the application as defined in the config.xml.\n     * \n     * @param {object} context - The Cordova context.\n     * @returns {string} The value of the name element in config.xml.\n     */\n    getAppName: function(context) {\n        var ConfigParser = context.requireCordovaModule(\"cordova-lib\").configparser;\n        var config = new ConfigParser(\"config.xml\");\n        return config.name();\n    },\n\n    /**\n     * The ID of the plugin; this should match the ID in plugin.xml.\n     */\n    getPluginId: function () {\n        return \"cordova-fabric-plugin\";\n    },\n\n    /**\n     * Used to get the plugin configuration for the given platform.\n     *\n     * The plugin configuration object will have the API and secret keys\n     * for the Fabric.io service that were specified when the plugin\n     * was installed.\n     *\n     * This configuration is obtained from, where \"ios\" is the platform name:\n     *    platforms/ios/ios.json\n     *\n     * @param {string} platform - The platform to get plugin configuration for, either \"ios\" or \"android\".\n     * @returns {string} The path to the platform's plugin JSON configuration file.\n     */\n    getPluginConfig: function(platform) {\n\n        var platformConfigPath = path.join(\"..\", \"..\", \"..\", platform + \".json\");\n\n        var platformConfig = require(platformConfigPath);\n\n        var pluginId = this.getPluginId();\n\n        var apiKey = platformConfig.installed_plugins[pluginId].FABRIC_API_KEY;\n        var apiSecret = platformConfig.installed_plugins[pluginId].FABRIC_API_SECRET;\n\n        var config = {\n            apiKey: apiKey,\n            apiSecret: apiSecret\n        };\n\n        return config;\n    },\n\n    /**\n     * Used to get the path to the XCode project's .pbxproj file.\n     *\n     * @param {object} context - The Cordova context.\n     * @returns The path to the XCode project's .pbxproj file.\n     */\n    getXcodeProjectPath: function(context) {\n\n        var appName = this.getAppName(context);\n\n        return path.join(\"platforms\", \"ios\", appName + \".xcodeproj\", \"project.pbxproj\");\n    },\n\n    /**\n     * Used to read the contents of the Android project's build.gradle file.\n     *\n     * @returns {string} The contents of the Android project's build.gradle file.\n     */\n    readBuildGradle: function() {\n        return fs.readFileSync(getBuildGradlePath(), \"utf-8\");\n    },\n\n    /**\n     * Used to write the given build.gradle contents to the Android project's\n     * build.gradle file.\n     *\n     * @param {string} buildGradle The body of the build.gradle file to write.\n     */\n    writeBuildGradle: function(buildGradle) {\n        fs.writeFileSync(getBuildGradlePath(), buildGradle);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/hooks/lib/ios-helper.js":"\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar utilities = require(\"./utilities\");\n\n/**\n * This is used as the display text for the build phase block in XCode as well as the\n * inline comments inside of the .pbxproj file for the build script phase block.\n */\nvar comment = \"\\\"Fabric.io: Crashlytics\\\"\";\n\nmodule.exports = {\n\n    /**\n     * This helper is used to add a build phase to the XCode project which runs a shell\n     * script during the build process. The script executes Crashlytics run command line\n     * tool with the API and Secret keys. This tool is used to upload the debug symbols\n     * (dSYMs) so that Crashlytics can display stack trace information in it's web console.\n     */\n    addShellScriptBuildPhase: function (context, xcodeProjectPath) {\n\n        var pluginConfig = utilities.getPluginConfig(\"ios\");\n        var xcode = context.requireCordovaModule(\"xcode\");\n\n        // Read and parse the XCode project (.pxbproj) from disk.\n        // File format information: http://www.monobjc.net/xcode-project-file-format.html\n        var xcodeProject = xcode.project(xcodeProjectPath);\n        xcodeProject.parseSync();\n\n        // Build the body of the script to be executed during the build phase.\n        var script = '\"' + '${SRCROOT}' + \"/\\\\\\\"\" + utilities.getAppName(context) + \"\\\\\\\"/Plugins/cordova-fabric-plugin/Fabric.framework/run \" + pluginConfig.apiKey + \" \" + pluginConfig.apiSecret + '\"';\n\n        // Generate a unique ID for our new build phase.\n        var id = xcodeProject.generateUuid();\n        // Create the build phase.\n        xcodeProject.hash.project.objects.PBXShellScriptBuildPhase[id] = {\n            isa: \"PBXShellScriptBuildPhase\",\n            buildActionMask: 2147483647,\n            files: [],\n            inputPaths: [],\n            name: comment,\n            outputPaths: [],\n            runOnlyForDeploymentPostprocessing: 0,\n            shellPath: \"/bin/sh\",\n            shellScript: script,\n            showEnvVarsInLog: 0\n        };\n\n        // Add a comment to the block (viewable in the source of the pbxproj file).\n        xcodeProject.hash.project.objects.PBXShellScriptBuildPhase[id + \"_comment\"] = comment;\n\n        // Add this new shell script build phase block to the targets.\n        for (var nativeTargetId in xcodeProject.hash.project.objects.PBXNativeTarget) {\n\n            // Skip over the comment blocks.\n            if (nativeTargetId.indexOf(\"_comment\") !== -1) {\n                continue;\n            }\n\n            var nativeTarget = xcodeProject.hash.project.objects.PBXNativeTarget[nativeTargetId];\n\n            nativeTarget.buildPhases.push({\n                value: id,\n                comment: comment\n            });\n        }\n\n        // Finally, write the .pbxproj back out to disk.\n        fs.writeFileSync(xcodeProjectPath, xcodeProject.writeSync());\n    },\n\n    /**\n     * This helper is used to remove the build phase from the XCode project that was added\n     * by the addShellScriptBuildPhase() helper method.\n     */\n    removeShellScriptBuildPhase: function (context, xcodeProjectPath) {\n\n        var xcode = context.requireCordovaModule(\"xcode\");\n\n        // Read and parse the XCode project (.pxbproj) from disk.\n        // File format information: http://www.monobjc.net/xcode-project-file-format.html\n        var xcodeProject = xcode.project(xcodeProjectPath);\n        xcodeProject.parseSync();\n\n        // First, we want to delete the build phase block itself.\n\n        var buildPhases = xcodeProject.hash.project.objects.PBXShellScriptBuildPhase;\n\n        for (var buildPhaseId in buildPhases) {\n\n            var buildPhase = xcodeProject.hash.project.objects.PBXShellScriptBuildPhase[buildPhaseId];\n            var shouldDelete = false;\n\n            if (buildPhaseId.indexOf(\"_comment\") === -1) {\n                // Dealing with a build phase block.\n\n                // If the name of this block matches ours, then we want to delete it.\n                shouldDelete = buildPhase.name && buildPhase.name.indexOf(comment) !== -1;\n            }\n            else {\n                // Dealing with a comment block.\n\n                // If this is a comment block that matches ours, then we want to delete it.\n                shouldDelete = buildPhaseId === comment;\n            }\n\n            if (shouldDelete) {\n                delete buildPhases[buildPhaseId];\n            }\n        }\n\n        // Second, we want to delete the native target reference to the block.\n\n        var nativeTargets = xcodeProject.hash.project.objects.PBXNativeTarget;\n\n        for (var nativeTargetId in nativeTargets) {\n\n            // Skip over the comment blocks.\n            if (nativeTargetId.indexOf(\"_comment\") !== -1) {\n                continue;\n            }\n\n            var nativeTarget = nativeTargets[nativeTargetId];\n\n            // We remove the reference to the block by filtering out the the ones that match.\n            nativeTarget.buildPhases = nativeTarget.buildPhases.filter(function (buildPhase) {\n                return buildPhase.comment !== comment;\n            });\n        }\n\n        // Finally, write the .pbxproj back out to disk.\n        fs.writeFileSync(xcodeProjectPath, xcodeProject.writeSync());\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/hooks/before_plugin_rm.js":"\nvar androidHelper = require('./lib/android-helper');\nvar iosHelper = require(\"./lib/ios-helper\");\nvar utilities = require(\"./lib/utilities\");\n\nmodule.exports = function(context) {\n\n    var platforms = context.opts.cordova.platforms;\n\n    // Remove the Gradle modifications that were added when the plugin was installed.\n    if (platforms.indexOf(\"android\") !== -1) {\n        androidHelper.removeFabricBuildToolsFromGradle();\n    }\n\n    // Remove the build script that was added when the plugin was installed.\n    if (platforms.indexOf(\"ios\") !== -1) {\n        var xcodeProjectPath = utilities.getXcodeProjectPath(context);\n        iosHelper.removeShellScriptBuildPhase(context, xcodeProjectPath);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/www/FabricPlugin.Answers.js":"'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar FabricAnswers = (function () {\n    function FabricAnswers() {\n        _classCallCheck(this, FabricAnswers);\n    }\n\n    _createClass(FabricAnswers, [{\n        key: 'sendPurchase',\n        value: function sendPurchase(itemPrice, currency, success, itemName, itemType, itemId, attributes) {\n            window.fabric.core.execPlugin('sendPurchase', [itemPrice, currency, success, itemName, itemType, itemId, attributes]);\n        }\n    }, {\n        key: 'sendAddToCart',\n        value: function sendAddToCart(itemPrice, currency, itemName, itemType, itemId, attributes) {\n            window.fabric.core.execPlugin('sendAddToCart', [itemPrice, currency, itemName, itemType, itemId, attributes]);\n        }\n    }, {\n        key: 'sendStartCheckout',\n        value: function sendStartCheckout(totalPrice, currency, itemCount, attributes) {\n            window.fabric.core.execPlugin('sendStartCheckout', [totalPrice, currency, itemCount, attributes]);\n        }\n    }, {\n        key: 'sendSearch',\n        value: function sendSearch(query, attributes) {\n            window.fabric.core.execPlugin('sendSearch', [query, attributes]);\n        }\n    }, {\n        key: 'sendShare',\n        value: function sendShare(method, contentName, contentType, contentId, attributes) {\n            window.fabric.core.execPlugin('sendShare', [method, contentName, contentType, contentId, attributes]);\n        }\n    }, {\n        key: 'sendRatedContent',\n        value: function sendRatedContent(rating, contentName, contentType, contentId, attributes) {\n            window.fabric.core.execPlugin('sendRatedContent', [rating, contentName, contentType, contentId, attributes]);\n        }\n    }, {\n        key: 'sendSignUp',\n        value: function sendSignUp(method, success, attributes) {\n            window.fabric.core.execPlugin('sendSignUp', [method, success, attributes]);\n        }\n    }, {\n        key: 'sendLogIn',\n        value: function sendLogIn(method, success, attributes) {\n            window.fabric.core.execPlugin('sendLogIn', [method, success, attributes]);\n        }\n    }, {\n        key: 'sendInvite',\n        value: function sendInvite(method, attributes) {\n            window.fabric.core.execPlugin('sendInvite', [method, attributes]);\n        }\n    }, {\n        key: 'sendLevelStart',\n        value: function sendLevelStart(levelName, attributes) {\n            window.fabric.core.execPlugin('sendLevelStart', [levelName, attributes]);\n        }\n    }, {\n        key: 'sendLevelEnd',\n        value: function sendLevelEnd(levelName, score, success, attributes) {\n            window.fabric.core.execPlugin('sendLevelEnd', [levelName, score, success, attributes]);\n        }\n    }, {\n        key: 'sendContentView',\n        value: function sendContentView(name, type, id, attributes) {\n            window.fabric.core.execPlugin('sendContentView', [name, type, id, attributes]);\n        }\n    }, {\n        key: 'sendScreenView',\n        value: function sendScreenView(name, id, attributes) {\n            window.fabric.core.execPlugin('sendContentView', [name, \"Screen\", id, attributes]);\n        }\n    }, {\n        key: 'sendCustomEvent',\n        value: function sendCustomEvent(name, attributes) {\n            window.fabric.core.execPlugin('sendCustomEvent', [name, attributes]);\n        }\n    }]);\n\n    return FabricAnswers;\n})();\n\nmodule.exports = new FabricAnswers();","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/www/FabricPlugin.Crashlytics.js":"'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar FabricCrashlytics = (function () {\n    function FabricCrashlytics() {\n        _classCallCheck(this, FabricCrashlytics);\n    }\n\n    _createClass(FabricCrashlytics, [{\n        key: 'addLog',\n        value: function addLog(message) {\n            window.fabric.core.execPlugin('addLog', [message]);\n        }\n    }, {\n        key: 'sendCrash',\n        value: function sendCrash() {\n            window.fabric.core.execPlugin('sendCrash', []);\n        }\n    }, {\n        key: 'sendNonFatalCrash',\n        value: function sendNonFatalCrash(message, trace) {\n            var params = [message];\n\n            if (trace) {\n                // validate trace (easier here)\n                var tmp = [];\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = trace[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var entry = _step.value;\n\n                        tmp.push({\n                            functionName: entry.functionName || 'unknown',\n                            fileName: entry.fileName || 'unknown',\n                            lineNumber: entry.lineNumber || 0\n                        });\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator['return']) {\n                            _iterator['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                if (tmp.length > 0) {\n                    params.push(tmp);\n                }\n            }\n\n            window.fabric.core.execPlugin('sendNonFatalCrash', params);\n        }\n    }, {\n        key: 'recordError',\n        value: function recordError(message, code) {\n            window.fabric.core.execPlugin('recordError', [message, code]);\n        }\n    }, {\n        key: 'setUserIdentifier',\n        value: function setUserIdentifier(userIdentifier) {\n            window.fabric.core.execPlugin('setUserIdentifier', [userIdentifier]);\n        }\n    }, {\n        key: 'setUserName',\n        value: function setUserName(userName) {\n            window.fabric.core.execPlugin('setUserName', [userName]);\n        }\n    }, {\n        key: 'setUserEmail',\n        value: function setUserEmail(userEmail) {\n            window.fabric.core.execPlugin('setUserEmail', [userEmail]);\n        }\n    }, {\n        key: 'setStringValueForKey',\n        value: function setStringValueForKey(value, key) {\n            window.fabric.core.execPlugin('setStringValueForKey', [value, key]);\n        }\n    }, {\n        key: 'setIntValueForKey',\n        value: function setIntValueForKey(value, key) {\n            window.fabric.core.execPlugin('setIntValueForKey', [value, key]);\n        }\n    }, {\n        key: 'setBoolValueForKey',\n        value: function setBoolValueForKey(value, key) {\n            window.fabric.core.execPlugin('setBoolValueForKey', [value, key]);\n        }\n    }, {\n        key: 'setFloatValueForKey',\n        value: function setFloatValueForKey(value, key) {\n            window.fabric.core.execPlugin('setFloatValueForKey', [value, key]);\n        }\n    }]);\n\n    return FabricCrashlytics;\n})();\n\nmodule.exports = new FabricCrashlytics();","/home/travis/build/npmtest/node-npmtest-cordova-fabric-plugin/node_modules/cordova-fabric-plugin/www/FabricPlugin.js":"'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar exec = require('cordova/exec');\n\nvar FabricPlugin = (function () {\n    function FabricPlugin() {\n        _classCallCheck(this, FabricPlugin);\n    }\n\n    _createClass(FabricPlugin, [{\n        key: 'pluginCallName',\n        value: function pluginCallName() {\n            return 'FabricPlugin';\n        }\n    }, {\n        key: 'execPlugin',\n        value: function execPlugin(method, parameters) {\n            exec(null, null, this.pluginCallName(), method, parameters);\n        }\n    }]);\n\n    return FabricPlugin;\n})();\n\nmodule.exports = new FabricPlugin();"}